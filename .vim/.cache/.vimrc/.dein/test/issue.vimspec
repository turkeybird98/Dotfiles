function! s:set_first_line(str)
    call setline(1, a:str)
endfunction

Describe '#issue'
    Describe #find_start()
        It returns the column to start completion
            Assert Equals(FindStart('issue', ' aaa #4321'), 5)
            Assert Equals(FindStart('issue', ' aa #4321)'), 4)
            Assert Equals(FindStart('issue', ' aa #4321 567', 'gg$T1'), 4)
        End

        It returns -1 when the column to start completion is not found
            Assert Equals(FindStart('issue', ' aaa bbb'), -1)
            Assert Equals(FindStart('issue', ' aaa #abc'), -1)
        End
    End

    Describe #candidates()
        It returns all issues
            let cs = github_complete#issue#candidates('')
            Assert IsList(cs)
            Assert NotEmpty(cs)
            Assert True(cs[0].word =~# '#\d\+')
        End

        It caches previous candidates
            call github_complete#api#reset_cache()
            Assert Empty(github_complete#api#get_cache())

            let cs = github_complete#issue#candidates('')

            " Note:
            " This test will fail if this repository is not original
            Assert True(github_complete#api#is_cached('repos/rhysd/github-complete.vim/issues', {'state' : 'all', 'per_page' : g:github_complete_max_issue_candidates}))

            Assert Equals(cs, github_complete#issue#candidates(''))
        End

        It narrows down candidates with base
            let cs = github_complete#issue#candidates('#1')
            Assert IsList(cs)
            Assert NotEmpty(cs)
            for c in cs
                Assert True(c.word =~# '^#1\d*')
            endfor
        End
    End

    Describe #fetch_issues()
        Before each
            call github_complete#api#reset_cache()
        End

        It fetches the API call
            let ps = github_complete#api#debug_working_process()
            let ps = {}
            call github_complete#issue#fetch_issues()
            Assert NotEmpty(github_complete#api#debug_working_process())
        End

        It is called at gitcommit filetype
            let ps = github_complete#api#debug_working_process()
            let ps = {}
            doautocmd FileType gitcommit
            Assert NotEmpty(github_complete#api#debug_working_process())
        End
    End
End

" vim:ft=vim
