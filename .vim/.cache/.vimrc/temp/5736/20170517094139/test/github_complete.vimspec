function! s:set_first_line(str)
    call setline(1, a:str)
endfunction

function! s:do_completion(line_text, base)
    call s:set_first_line(a:line_text)
    normal! gg$
    let start = github_complete#complete(1, '')
    let cs = github_complete#complete(0, a:base)
    normal! ggdd
    return [start, cs]
endfunction

function! AltOmniFunction(findstart, base)
    if a:findstart == 1
        return 42
    endif

    return map(['foo', 'bar'], '{"word" : v:val}')
endfunction

Describe #complete()
    After each
        normal! ggdG
    End

    It shows emoji completion candidates after ':'
        let [s, cs] = s:do_completion('aaa bbb :do', ':do')
        Assert Equals(s, 8)
        for c in cs
            Assert Match(c.word, '^:do\w*:$')
        endfor

        let [s, cs] = s:do_completion('aaa bbb : ', ':')
        Assert Equals(s, 8)
        Assert NotEmpty(cs)
        for c in cs
            Assert Match(c.word, '^:[^:]\+:$')
        endfor

        let [s, cs] = s:do_completion('aaa bbb :do)', ':do')
        Assert Equals(s, 8)
        Assert NotEmpty(cs)
        for c in cs
            Assert Match(c.word, '^:do\w*:$')
        endfor
    End

    It shows issue completion candidates after '#'
        let [s, cs] = s:do_completion('aaa bbb #1', '#1')
        Assert Equals(s, 8)
        Assert NotEmpty(cs)
        for c in cs
            Assert Match(c.word, '^#1\d*$')
        endfor

        let [s, cs] = s:do_completion('aaa bbb # ', '#')
        Assert Equals(s, 8)
        Assert NotEmpty(cs)
        for c in cs
            Assert Match(c.word, '^#\d\+$')
        endfor

        let [s, cs] = s:do_completion('aaa bbb #)', '#')
        Assert Equals(s, 8)
        Assert NotEmpty(cs)
        for c in cs
            Assert Match(c.word, '^#\d\+$')
        endfor
    End

    It shows user completion candidates after '@'
        let [s, cs] = s:do_completion('aaa bbb @rhy ', '@rhy')
        Assert Equals(s, 8)
        Assert NotEmpty(cs)
        for c in cs
            Assert Match(c.word, '@.*rhy')
        endfor
    End

    It shows user completion candidates after 'github.com/'
        let [s, cs] = s:do_completion('aaa bbb github.com/rhy ', 'rhy')
        Assert Equals(s, 19)
        Assert NotEmpty(cs)
        for c in cs
            Assert Match(c.word, 'rhy')
        endfor
    End

    It shows repository completion candidates after 'user-name/'
        let [s, cs] = s:do_completion('aaa bbb github.com/rhysd/cle ', 'rhysd/cle')
        Assert Equals(s, 19)
        Assert NotEmpty(cs)
        for c in cs
            Assert Match(c.word, '^rhysd/cle')
        endfor
    End

    It shows link completion candidates after '[something]('
        let [s, cs] = s:do_completion('aaa bbb [clever-f.vim]( ', '[clever-f.vim](')
        Assert Equals(s, 8)
        Assert NotEmpty(cs)
        for c in cs
            Assert Match(c.word, '^\[clever-f\.vim](https://github.com/.\+')
        endfor
    End

    It fallbacks to other omni functions if g:github_complete_fallback_omnifunc is set
        let saved = g:github_complete_fallback_omnifunc
        let g:github_complete_fallback_omnifunc = 'AltOmniFunction'

        let [s, cs] = s:do_completion("aaa bbb ccc", "ccc")
        Assert Equals(s, 42)
        Assert NotEmpty(cs)
        Assert Equals(cs, [{"word" : "foo"}, {"word" : "bar"}])
        let g:github_complete_fallback_omnifunc = saved
    End
End

Describe #call()
    It calls API with caching
        call github_complete#api#reset_cache()
        let rs = github_complete#call_api('emojis', {})
        Assert NotEmpty(rs)
        Assert NotEmpty(github_complete#api#get_cache())
    End

    It calls API without caching if g:github_complete_enable_api_cache is set to 0
        let saved = g:github_complete_enable_api_cache
        let g:github_complete_enable_api_cache = 0
        call github_complete#api#reset_cache()

        let rs = github_complete#call_api('emojis', {})
        Assert NotEmpty(rs)
        Assert Empty(github_complete#api#get_cache())

        let g:github_complete_enable_api_cache = saved
    End
End

Describe #manual_complete()
    It open popup menu to complete
        call github_complete#api#reset_cache()
        Assert Empty(github_complete#api#get_cache())
        call s:set_first_line('aaa bbb @rh ')
        normal! gg$
        execute 'normal!' "i\<C-r>=github_complete#manual_complete()\<CR>"
        Assert NotEmpty(github_complete#api#get_cache())
        call github_complete#api#reset_cache()
    End
End

" vim:ft=vim
